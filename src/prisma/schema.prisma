// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// AUTH

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  stripeCustomerId String?  @unique // Store Stripe Customer ID
  role             UserRole @default(CUSTOMER)

  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

//
// PRODUCT 

enum ProductType {
  STANDARD
  SUBSCRIPTION
}

enum BillingInterval {
  MONTH
  QUARTER
  YEAR
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  slug        String?
  icon        String?
  products    Product[]
}

model Product {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      @unique
  description     String?
  imageUrl        String?
  categoryId      String?     @db.ObjectId
  stripeProductId String?
  type            ProductType @default(STANDARD)
  prices          Price[]
  deleted         Boolean     @default(false)

  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  slug            String
  icon            String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  category  Category? @relation(fields: [categoryId], references: [id])
  order     Order[]
}

model Price {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  product         Product          @relation(fields: [productId], references: [id])
  productId       String           @db.ObjectId
  stripePriceId   String
  unitAmount      Float
  origPrice       Float?
  currency        String
  billingInterval BillingInterval?
  isRecurring     Boolean
}

// TEMPLATE START 
model TemplateCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  slug       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Template   Template? @relation(fields: [templateId], references: [id])
  templateId String?   @db.ObjectId
}

model Template {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  fileUrl     String
  liveUrl     String
  description String?
  price       Float
  salePrice   Float
  categoryIds String[]           @db.ObjectId // Array of category IDs (workaround for MongoDB)
  images      Image[]
  deleted     Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  Order       Order[]
  categories  TemplateCategory[]
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  templateId String   @db.ObjectId
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

enum OrderStatus {
  pending
  completed
  failed
  canceled
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  quantity  Int
  total     Float
  currency  String?     @default("USD")
  status    OrderStatus @default(pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relationships
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  couponId String? @db.ObjectId
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  templateId String?   @db.ObjectId
  template   Template? @relation(fields: [templateId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  // Additional fields
  note           String?
  websiteDetails String?
  metadata       Json? // order-specific data

  // Payments
  payment Payment[]
}

enum PaymentStatus {
  unpaid
  paid
  refunded
  failed
}

enum PaymentGateWay {
  PayPal
  Stripe
  Not_Specified
}

model Payment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String         @db.ObjectId
  gateway       PaymentGateWay @default(Not_Specified) // e.g., 'PayPal', 'Stripe'
  transactionId String? // Gateway-specific transaction ID
  amount        Float // Payment amount
  currency      String?        @default("USD")
  status        PaymentStatus  @default(unpaid) // 'unpaid', 'paid', 'failed', etc.
  metadata      Json? // Gateway-specific data
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Coupon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  code       String    @unique // e.g., 'SUMMER21'
  discount   Float // Percentage or flat discount
  validFrom  DateTime
  validUntil DateTime?
  createdAt  DateTime  @default(now())
  orders     Order[] // Track which orders used this coupon
}
