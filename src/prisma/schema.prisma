// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum STATUS {
  OPEN
  CLOSED
  RESOLVED
}

model Ticket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      STATUS   @default(OPEN)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Reply       Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String   @db.ObjectId
}

// PRODUCT 

enum ProductType {
  STANDARD
  SUBSCRIPTION
}

enum BillingInterval {
  MONTH
  QUARTER
  YEAR
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[]
}

model Product {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      @unique
  description     String?
  imageUrl        String?
  categoryId      String?     @db.ObjectId
  stripeProductId String?
  type            ProductType @default(STANDARD)
  prices          Price[]
  deleted         Boolean     @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  category  Category? @relation(fields: [categoryId], references: [id])
  order     Order[]
}

model Price {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  product         Product          @relation(fields: [productId], references: [id])
  productId       String           @db.ObjectId
  stripePriceId   String
  unitAmount      Float
  origPrice       Float?
  currency        String
  billingInterval BillingInterval?
  isRecurring     Boolean
}

enum OrderStatus {
  pending
  completed
  failed
  canceled
}

enum PaymentStatus {
  unpaid
  paid
  refunded
  failed
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  quantity      Int
  total         Float
  currency      String        @default("USD")
  status        OrderStatus   @default(pending)
  paymentStatus PaymentStatus @default(unpaid)
  transactionId String?       @unique
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  couponId  String? @db.ObjectId
  coupon    Coupon? @relation(fields: [couponId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Coupon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  code       String    @unique // e.g., 'SUMMER21'
  discount   Float // Percentage or flat discount
  validFrom  DateTime
  validUntil DateTime?
  createdAt  DateTime  @default(now())
  orders     Order[] // Track which orders used this coupon
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId      String   @unique
  stripeCustomerId String?  @unique // Store Stripe Customer ID
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Order            Order[]
}
